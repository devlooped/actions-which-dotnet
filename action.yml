name: which-dotnet
author: Daniel Cazzulino
description: Determines which versions of .NET are in use

inputs:
  versions:  
    description: 'The output JSON file containing the versions'
    required: true
    default: './.github/dotnet.json'

branding:
  icon: settings
  color: "purple"

runs:
  using: composite
  steps:
    - name: ðŸ”Ž dotnet
      shell: pwsh
      run: |
        # Locate all .NET project files in the repository
        $projFiles = Get-ChildItem -Recurse -Include *.*proj
        $versions = New-Object System.Collections.Generic.HashSet[int]

        foreach ($file in $projFiles) {
          try {
            $tfOutput = dotnet msbuild $file.FullName -getProperty:TargetFramework
            if ([string]::IsNullOrWhiteSpace($tfOutput)) {
              $tfOutput = dotnet msbuild $file.FullName -getProperty:TargetFrameworks
            }
            if ($tfOutput) {
              $frameworks = $tfOutput.Trim().Split(';')
              foreach ($framework in $frameworks) {
                if ($framework -match '^net(\d+)\.\d+$') {
                  $versions.Add([int]$Matches[1]) | Out-Null
                }
                elseif ($framework -match '^netcoreapp(\d+)\.\d+$') {
                  $versions.Add([int]$Matches[1]) | Out-Null
                }
              }
            }
          } catch {
            continue
          }            
        }
        # Write the versions to the output file
        if ($versions.Count -eq 0) {
          Write-Host "No .NET versions found in the repository."
        } else {
          # Sort versions in ascending order and convert to .x format
          $sortedVersions = ($versions | Sort-Object) | ForEach-Object { "$_.x" }
          Write-Host "Found .NET versions:"
          Write-Host $($sortedVersions | ConvertTo-Json -AsArray)
          $sortedVersions | ConvertTo-Json -AsArray | Out-File -FilePath ${{ inputs.versions }} -Encoding utf8 -Force
          Write-Host "Versions written to ${{ inputs.versions }}"
        }